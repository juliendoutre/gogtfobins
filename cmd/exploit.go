package main

import (
	"fmt"
	"os"
	"os/exec"
	"strings"

	"github.com/juliendoutre/gogtfobins"
	"github.com/spf13/cobra"
)

func exploitCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "exploit BINARY FUNCTION",
		Short: "Exploit a binary to achieve a function.",
		Args:  cobra.ExactArgs(2), //nolint:mnd
		RunE: func(cmd *cobra.Command, args []string) error {
			index, err := gogtfobins.LoadIndex()
			if err != nil {
				return fmt.Errorf("building gtfobins index: %w", err)
			}

			binary := args[0]
			function := args[1]

			gtfobin, isKnownBinary := index[binary]
			if !isKnownBinary {
				return ErrUnknownBinary
			}

			fun, doesBinarySupportFunction := gtfobin.Functions[function]
			if !doesBinarySupportFunction {
				return ErrUnknownFunction
			}

			for _, entry := range fun {
				if entry.Code == "" {
					continue
				}

				fmt.Fprintln(os.Stdout, "Will execute the following code:")
				fmt.Fprintln(os.Stdout, entry.Code)
				fmt.Fprint(os.Stdout, "Are you sure? (y/N)")

				var answer string
				if _, err := fmt.Fscan(os.Stdin, &answer); err != nil {
					return fmt.Errorf("reading user answer: %w", err)
				}

				if strings.ToLower(answer) == "y" {
					cmd := exec.CommandContext(cmd.Context(), "bash", "-c", entry.Code) //nolint:gosec
					cmd.Stdin = os.Stdin
					cmd.Stderr = os.Stderr
					cmd.Stdout = os.Stdout

					if err := cmd.Run(); err != nil {
						return fmt.Errorf("executing code: %w", err)
					}
				}
			}

			return nil
		},
	}

	return cmd
}
